#!/usr/bin/env bb

(require '[babashka.deps :as deps])

(deps/add-deps
 '{:deps
   {com.lambdaisland/cli        {:mvn/version "0.18.74"}
    borkdude/rewrite-edn        {:mvn/version "0.4.8"}
    org.clojure/data.xml        {:mvn/version "0.2.0-alpha9"}
    com.lambdaisland/xml-select {:mvn/version "0.2.5"}}})

(require
 '[lambdaisland.cli :as cli]
 '[borkdude.rewrite-edn :as re]
 '[clojure.data.xml :as xml]
 '[clojure.edn :as edn]
 '[lambdaisland.xml-select :as xs]
 '[clojure.java.shell :as sh]
 '[clojure.pprint :as pprint])

(def repos
  ["https://repo.clojars.org/"
   "https://repo.maven.apache.org/maven2/"])

(defn maven-artifact-versions [artifact]
  (let [[group artifact-id] (str/split artifact #"/")
        doc (some #(try
                     (slurp (str % (str/replace group #"\." "/") "/" artifact-id "/maven-metadata.xml"))
                     (catch Exception e))
                  repos)]
    (when doc
      (map (comp first :content)
           (xs/select
            [:metadata :versions :> :version]
            (xml/parse-str doc))))))

(defn version-sort-key [version]
  ;; not ideal, but vectors have to be of the same length, so ignore anything
  ;; beyond major.minor.teeny. Works in 97% of all cases.
  (let [[a i t] (map #(try (parse-long %) (catch Exception _ %))
                     (str/split version #"[\.\-]"))]
    [(or a 0) (or i 0) (or t 0)]))

(defn maven-latest-version [artifact]
  (let [versions(sort-by version-sort-key (maven-artifact-versions artifact))]
    (or
     (last (remove #(re-find #"-(SNAPSHOT|alpha|beta)" %) versions))
     (last versions))))

(defn maven-all-jars []
  (edn/read-string
   (str "["
        (-> "https://repo.clojars.org/all-jars.clj"
            slurp
            ;; there's an artifact in there that's not a valid symbol, boooo
            (str/replace #"trident\/1\.1" "trident/v1.1")
            (str/replace #"3x-ui-java-wrapper" "x3x-ui-java-wrapper"))
        "]")))

(defn add-dep [{:keys [artifact]}]
  (prn "add-dep" artifact (maven-latest-version artifact))
  (spit "deps.edn"
        (re/assoc-in (re/parse-string (try (slurp "deps.edn") (catch Exception _ "{}")))
                     [:deps (symbol artifact) :mvn/version]
                     (maven-latest-version artifact))))

(defn add-bb-dep [{:keys [artifact]}]
  (spit "bb.edn"
        (re/assoc-in (re/parse-string (try (slurp "bb.edn") (catch Exception _ "{}")))
                     [:deps (symbol artifact) :mvn/version]
                     (maven-latest-version artifact))))


(defn search-dep* [{:keys [needle]}]
  (for [artifact (distinct (map first (maven-all-jars)))
        :let [artifact (if (simple-symbol? artifact)
                         (symbol (str artifact) (str artifact))
                         artifact)]
        :when (.contains ^String (str artifact) needle)]
    artifact))

(defn search-dep [opts]
  (run! println (search-dep* opts)))

(defn lucky-dep [opts]
  (doseq [artifact (search-dep* opts)]
    (println "Adding" artifact #'add-dep)
    (add-dep {:artifact (str artifact)})
    (println "ok")))

(defn lucky-bb-dep [opts]
  (doseq [artifact (search-dep* opts)]
    (println "Adding" artifact)
    (add-bb-dep {:artifact (str artifact)})))

(defn bin-dev []
  ['(require '[lambdaisland.cli :as cli])
   '(def init {})
   '(defn initialize-local-files
      "Create local files which are not checked in"
      [_]
      (spit "deps.local.edn" "{:launchpad/aliases [:dev]}"))
   '(def commands ["init" (var initialize-local-files)])
   '(def flags ["-v, --verbose" "Increase verbosity"
                "-h, --help" "Show help text for a (sub-)command"])
   '(cli/dispatch*
     {:name "bin/dev"
      :init init
      :flags flags
      :commands commands})])

(defn bin-launchpad []
  ['(require '[lambdaisland.launchpad :as launchpad])
   '(launchpad/main {:java-args ["-Dclojure.main.report=stderr"]})])

(defn pprint-str [o]
  (binding [*print-namespace-maps* false]
    (with-out-str (pprint/pprint o))))

(defn add-bin-dev [_]
  (add-bb-dep {:artifact "com.lambdaisland/cli"})
  (sh/sh "mkdir" "-p" "bin")
  (spit "bin/dev" (str "#!/usr/bin/env bb\n\n"
                       (str/join "\n" (map pprint-str (bin-dev)))
                       "\n;; Local Variables:\n;; mode:clojure\n;; End:\n"))
  (sh/sh "chmod" "+x" "bin/dev"))

(defn add-bin-launchpad [_]
  (add-bb-dep {:artifact "com.lambdaisland/launchpad"})
  (sh/sh "mkdir" "-p" "bin")
  (spit "bin/launchpad" (str "#!/usr/bin/env bb\n\n"
                             (str/join "\n" (map pprint-str (bin-launchpad)))
                             "\n;; Local Variables:\n;; mode:clojure\n;; End:\n"))
  (sh/sh "chmod" "+x" "bin/launchpad"))

(defn bump [{:keys [file]}]
  (let [contents (slurp file)
        deps     (edn/read-string contents)
        re-deps  (re/parse-string contents)]
    (spit file
          (reduce (fn [re-deps [artifact _]]
                    (println "Bumping" artifact)
                    (try
                      (re/assoc-in re-deps [:deps artifact] {:mvn/version (maven-latest-version artifact)})
                      (catch Exception e
                        (println "Couldn't bump" artifact)
                        re-deps)))
                  re-deps
                  (get deps :deps)))
    ))

(def commands
  ["bin/dev" {:command #'add-bin-dev}
   "bin/launchpad" {:command #'add-bin-launchpad}
   "dep <artifact>" {:doc "Add the latest version of the given dependency to deps.edn"
                     :command #'add-dep}
   "bb-dep <artifact>" {:doc "Add the latest version of the given dependency to bb.edn"
                        :command #'add-bb-dep}
   "lucky <needle>" {:doc "Search + add latest artifact"
                     :command #'lucky-dep}
   "bb-lucky <needle>" {:doc "Search + add latest artifact"
                        :command #'lucky-bb-dep}
   "search <needle>" {:doc "Find artifact names that match"
                      :command #'search-dep}
   "bump <file>" {:doc "Upgrade all artifacts in file (deps.edn, bb.edn, etc)"
                  :command #'bump}
   "lucky <artifact>"])

(cli/dispatch*
 {:name ",add"
  :commands commands})


;; Local Variables:
;; mode:clojure
;; End:

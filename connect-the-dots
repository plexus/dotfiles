#!/usr/bin/env bash

ARG="$1"

print_linking() {
    echo $'\e[34m[\e[33m⇠\e[34m]\e[0m' "$@"
}

print_forcing() {
    echo $'\e[34m[\e[31m⇠\e[34m]\e[0m' "$@"
}

print_already_linked() {
    echo $'\e[34m[\e[32m✓\e[34m]\e[0m' "$@"
}

print_problem() {
    echo $'\e[34m[\e[31m!\e[34m]\e[0m' "$@"
}

print_recursing() {
    echo $'  \e[34m[\e[33m⇣\e[34m]\e[0m' "$@"
}

export IGNORE="$(cat IGNORE)"

ignore_p() {
  echo "$IGNORE" | while read f ; do
      if [[  "$1" =~ "$f" ]]; then
          exit 1
      fi
  done
  [[ $? -eq 1 ]] || false
}

export -f ignore_p

scan_files() {
    export path="$1"
    find "$path" \
         -exec bash -c 'for f; do f="${f#"$path"}" ; ignore_p "$f" || printf "$f\n"; done' \
         find-sh {} \;
}

dotdir() {
    cd `dirname "${BASH_SOURCE[0]}"` && echo "`pwd`/$1"
}

create_symlink_if_possible() {
    local dotfile=$1

    if [[ -e "$HOME/$dotfile" ]]; then
        print_problem "$dotfile : can't create symlink, regular file is in the way."
    else
        print_linking "$dotfile : creating symlink"
        if [[ "$ARG" = "--dry-run" ]]; then
            echo ln -s "`dotdir $dotfile`" "$HOME/$dotfile"
        else
            ln -s "`dotdir $dotfile`" "$HOME/$dotfile"
        fi
    fi
}

check_existing_symlink() {
    local dotfile=$1
    local target=$(readlink -f $HOME/$dotfile)

    if [[ "$target" != "`dotdir $dotfile`" ]]; then
        print_problem "$dotfile : symlink points elsewhere -> $target"
    else
        print_already_linked "$dotfile"
    fi
}

force_symlink() {
    local dotfile=$1

    print_forcing "$dotfile : forcing new symlink"
    mv "$HOME/$dotfile" "$HOME/${dotfile}.bak"
    ln -s "`dotdir $dotfile`" "$HOME/$dotfile"
}

handle_dotfile() {
    local dotfile=$1

    if [[ -L "$HOME/$dotfile" ]]; then
        if [[ "$ARG" == "-f" ]]; then
            force_symlink $dotfile
        else
            check_existing_symlink $dotfile
        fi
    else
        create_symlink_if_possible $dotfile
    fi
}

handle_directory() {
    local dir=$1;
    mkdir -p "$HOME/$dir"
}

handle() {
    local dotfile=$1

    if [[ -f "${dotfile}" ]]; then
        handle_dotfile "${dotfile}"
    elif [[ -d "${dotfile}" ]]; then
        handle_directory "${dotfile}"
    fi
}

main() {
    for dotfile in $(scan_files `dotdir`) ; do
        if [[ ! "${dotfile}" = "" ]]; then
            handle "${dotfile}"
        fi
    done
}

main
